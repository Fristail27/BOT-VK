const Bot = require('./../tools/classBot')
const helloMessage = require("../tools/Messages/helloMessage");
const respectMessage = require("../tools/Messages/respectMessage");
const getMyReputation = require("../tools/Messages/getMyReputation");
const getTost = require('../tools/Messages/getTost')
const getOnlineUsers = require('../tools/Messages/getOnlineUsers.js')
const getCommands = require('../tools/Messages/getCommands.js')
const sampleAnswerMessage = require('../tools/Messages/sampleAnswerMessage.js')
const killMessage = require('../tools/Messages/killMessage.js')
const twoNameActionCreator = require('./../services/messageCreators/twoNameActionCreator')
const getQuote = require("../tools/Messages/getQuote");


async function confirm(req, res, next) {
    switch (req.body.type) {
        case 'confirmation':
            Bot.confirm(res);
            break;
        case 'message_new':
            // console.log(req.body.object)
            if (req.body.object.message.text.toUpperCase().trim() === "–î–ñ–£–°–ò –ü–†–ò–í–ï–¢") {
                helloMessage(req, res);
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "+" && req.body.object.message.reply_message) {
                respectMessage(req, res);
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–î–ñ–£–°–ò –£–í–ê–ñ–ï–ù–ò–ï") {
                getMyReputation(req, res)
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–î–ñ–£–°–ò –¢–û–°–¢") {
                getTost(req, res)
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–î–ñ–£–°–ò –¶–ò–¢–ê–¢–ê") {
                getQuote(req, res)
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–î–ñ–£–°–ò –û–ù–õ–ê–ô–ù") {
                getOnlineUsers(req)
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–î–ñ–£–°–ò") {
                getCommands(req)
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–£–ë–ò–¢–¨") {
                twoNameActionCreator(req, "–≤—ã —É–±–∏–ª–∏" ,"–≤—ã –≤—ã–ø–∏–ª–∏–ª–∏—Å—å, –≤—ã –º–æ–ª–æ–¥–µ—Ü!", "üî™", "üëç")
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–û–ë–ù–Ø–¢–¨") {
                twoNameActionCreator(req, "–≤—ã –æ–±–Ω—è–ª–∏" ,"–∑–∞—á–µ–º –æ–±–Ω–∏–º–∞—Ç—å —Å–µ–±—è?!", "ü§ó", "üò¶")
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–ü–û–¶–ï–õ–û–í–ê–¢–¨") {
                twoNameActionCreator(req, "–≤—ã –ø–æ—Ü–µ–ª–æ–≤–∞–ª–∏" ,"–∫—Ö–º–º–º?!", "üòò", "ü§¨")
                Bot.send200(res);
            } else if (req.body.object.message.text.toUpperCase().trim() === "–ü–û–ö–û–†–ú–ò–¢–¨") {
                twoNameActionCreator(req, "–≤—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏" ,"–≤–∫—É—Å–Ω–æ?", "üçî", "üçâ")
                Bot.send200(res);
            } else {
                if (req.body.object.message.text.toUpperCase().includes("–î–ñ–£–°–ò")) {
                    sampleAnswerMessage(req, `üò≠ | —Ç–∞–∫–æ–π –¥–∂—É—Å–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ—Ç`)
                }
                Bot.send200(res);
            }
            break;
        default:
            break;
    }
}

module.exports = confirm

